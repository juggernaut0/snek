type Option<T> = T | None {}
type Node { data: Number, left: Option<Node>, right: Option<Node> }

let make_fun = { mul ->
	let f = { { data, left, right }: Node ->
		(match left
			{ node: Node -> (f node) }
			{ _ -> () }
		)
		(println (mul * data))
		(match right
			{ node: Node -> (f node) }
			{ _ -> () }
		)
	}
	f
}
let tree = (Node 2 (Some (Node 1 None None)) (Some (Node 3 None None)))
let fun = (make_fun 2)
(fun tree)

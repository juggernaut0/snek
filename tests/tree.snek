type Option<T> = T | None {}
let None: None = new {}
type Node { data: Number, left: Option<Node>, right: Option<Node> }

let Node = { data: Number left: Option<Node> right: Option<Node> ->
    new Node { left: left, right: right, data: data }
}

let traverse: { { Number -> () } Node -> () } = { f { data, left, right }: Node ->
    (match left
        { node: Node -> (traverse f node) }
        { _ -> () }
    )
    (f data)
    (match right
        { node: Node -> (traverse f node) }
        { _ -> () }
    )
    ()
}
let make_fun: { Number -> { Node -> () } }  = { mul ->
	let f = { node: Node ->
		(traverse { data -> (println (mul * data)) } node)
	}
	f
}
let tree = (Node 2 (Node 1 None None) (Node 3 None None))
let fun = (make_fun 2)
(fun tree)
